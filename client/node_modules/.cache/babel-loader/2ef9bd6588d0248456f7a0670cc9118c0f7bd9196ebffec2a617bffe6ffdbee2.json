{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000';\nexport const API_ENDPOINTS = {\n  WORLDVIEWS: `${API_BASE_URL}/api/worldviews`,\n  AUTH: `${API_BASE_URL}/api/auth`,\n  USERS: `${API_BASE_URL}/api/users`,\n  COMMENTS: `${API_BASE_URL}/api/comments`,\n  UPLOAD: `${API_BASE_URL}/api/upload`\n};\nexport const apiRequest = async (url, options = {}) => {\n  console.log('API Request URL:', url);\n  const defaultOptions = {\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers\n    }\n  };\n\n  // 如果有token，添加到请求头\n  const token = localStorage.getItem('token');\n  if (token) {\n    mergedOptions.headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    console.log('Sending request with options:', mergedOptions);\n    const response = await fetch(url, mergedOptions);\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n\n    // 检查响应是否为JSON\n    const contentType = response.headers.get('content-type');\n    console.log('Response content type:', contentType);\n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await response.text();\n      console.log('Response text (first 200 chars):', text.substring(0, 200));\n      throw new Error(`Expected JSON response but got ${contentType}`);\n    }\n    const data = await response.json();\n    console.log('Response data:', data);\n    if (!response.ok) {\n      throw new Error(data.message || 'Something went wrong');\n    }\n    return data;\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","API_ENDPOINTS","WORLDVIEWS","AUTH","USERS","COMMENTS","UPLOAD","apiRequest","url","options","console","log","defaultOptions","credentials","headers","mergedOptions","token","localStorage","getItem","Authorization","response","fetch","status","contentType","get","includes","text","substring","Error","data","json","ok","message","error"],"sources":["D:/编程项目/Nood.js/world/client/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000';\n\nexport const API_ENDPOINTS = {\n  WORLDVIEWS: `${API_BASE_URL}/api/worldviews`,\n  AUTH: `${API_BASE_URL}/api/auth`,\n  USERS: `${API_BASE_URL}/api/users`,\n  COMMENTS: `${API_BASE_URL}/api/comments`,\n  UPLOAD: `${API_BASE_URL}/api/upload`\n};\n\nexport const apiRequest = async (url, options = {}) => {\n  console.log('API Request URL:', url);\n  \n  const defaultOptions = {\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers,\n    },\n  };\n\n  // 如果有token，添加到请求头\n  const token = localStorage.getItem('token');\n  if (token) {\n    mergedOptions.headers.Authorization = `Bearer ${token}`;\n  }\n\n  try {\n    console.log('Sending request with options:', mergedOptions);\n    const response = await fetch(url, mergedOptions);\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n    \n    // 检查响应是否为JSON\n    const contentType = response.headers.get('content-type');\n    console.log('Response content type:', contentType);\n    \n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await response.text();\n      console.log('Response text (first 200 chars):', text.substring(0, 200));\n      throw new Error(`Expected JSON response but got ${contentType}`);\n    }\n    \n    const data = await response.json();\n    console.log('Response data:', data);\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Something went wrong');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,aAAa,GAAG;EAC3BC,UAAU,EAAE,GAAGF,YAAY,iBAAiB;EAC5CG,IAAI,EAAE,GAAGH,YAAY,WAAW;EAChCI,KAAK,EAAE,GAAGJ,YAAY,YAAY;EAClCK,QAAQ,EAAE,GAAGL,YAAY,eAAe;EACxCM,MAAM,EAAE,GAAGN,YAAY;AACzB,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACrDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,GAAG,CAAC;EAEpC,MAAMI,cAAc,GAAG;IACrBC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,MAAMC,aAAa,GAAG;IACpB,GAAGH,cAAc;IACjB,GAAGH,OAAO;IACVK,OAAO,EAAE;MACP,GAAGF,cAAc,CAACE,OAAO;MACzB,GAAGL,OAAO,CAACK;IACb;EACF,CAAC;;EAED;EACA,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,aAAa,CAACD,OAAO,CAACK,aAAa,GAAG,UAAUH,KAAK,EAAE;EACzD;EAEA,IAAI;IACFN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEI,aAAa,CAAC;IAC3D,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAEO,aAAa,CAAC;IAChDL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAES,QAAQ,CAACE,MAAM,CAAC;IAChDZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAES,QAAQ,CAACN,OAAO,CAAC;;IAElD;IACA,MAAMS,WAAW,GAAGH,QAAQ,CAACN,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC;IACxDd,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,WAAW,CAAC;IAElD,IAAI,CAACA,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC7D,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClChB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEe,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;MACvE,MAAM,IAAIC,KAAK,CAAC,kCAAkCL,WAAW,EAAE,CAAC;IAClE;IAEA,MAAMM,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCpB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEkB,IAAI,CAAC;IAEnC,IAAI,CAACT,QAAQ,CAACW,EAAE,EAAE;MAChB,MAAM,IAAIH,KAAK,CAACC,IAAI,CAACG,OAAO,IAAI,sBAAsB,CAAC;IACzD;IAEA,OAAOH,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}